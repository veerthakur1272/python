------------type casting-------------

int ()
str ()
list()
dict()
tuple()
sat()
frozenset()

--------data types--------
Nomeric
   integer 
   flot
   complex

string
   list
          orderd collection                      collection data type
   tuple

set          (unique elemend hold)
frozenset   unorderd collection

dict  mapped data


bo


string:-
=>collection og charactors.
=>orderd collection
=>indexing supported
=>Slicing supported
=>immutable in nature
=>represented in
      1.' ' single-line string
      2." " single string
      3.''' ''' multi-line string 

Ex:-
  x='veer'
  print(x)
  print(type(x))

  list:-
     =>collection of an elements
                   homogeneous
                   heterogeneous
     => orderd collection
     => indexing supported
     => Slicing supported
     => multable in nature
     => represented in [] with comma(,)
          seperated elements.    


function of list:-
    max()
    min()
    id()
    sum()
    typec()
    len()
    list()


list metherds:-
   methad:-
     1. append() => add one elements in last position.
     2. extend() => add multiple elements in last position.
     3. insert() => add elements in targated position.
     4. pop() => remove/delete last elements.
     5. remove() => remove/delete any targated object.
     6. clear() => clear/remove all elements. (del l)
     7. copy() => to create addition copy with diff adderss.
     8. index() =>
     9.
     10.
     11.



Tuple:-
    => collection of elements.  (homogeneous,heterogeneous)
    => orderd collection.
    => indexing supported.
    => Slicing supported.
    => immutable in nature.
    => represented in () with comma(,) supported elements.
    
   Ex:-
       t=(10,20,30,'veer')
       print=(t)
       print(type(t)) 
             

function of tuple:-
1.max() =>
2.min() =>
3.sum() =>
4.len() =>
5.id() =>
6.type =>
7.tuple() =>


Dict:-
=> collection of 'key':'value' pairs
=> where 'key' must be unique.
=> and value may be dublicate.
=> indexing not supported.
=> Slicing not supported.
=> multable in nature.
=> represented in {} with comma(,) supported elements.

Ex:-
d{'name':'veer'
'age':20,
'quali':'b.comm'
print(d)
print(type(d))}

function of dict:-
1.max() =>
2.min() =>
3.len() =>
4.type() =>
5.id() =>
6.dict() =>

Dict methad:-
copy()
clear()
keys()
value()
items()
get()
fromkays()
updated()
setdefault()
pop()
popitem()

Set:-
  => collection of unique elements.
  => unorderd collection.
  => indexing not supported.
  => Slicing not supported.
  => multable in nature.
  => represented in {} with comma(,) seperated elements

Ex:-
s={10,20,30,'veer','raj','rahul',10,20}
print(s)
print(type(s))

function of set:-
max
min
sum
type
id
len

set methad:-
copy()
clear()
add()
updated()
remove()
discard()
pop()

frozenset:-
=> collection of unique elements.
=> freeze any collection.(list,set,type,string)
=> unorderd collection.
=> indexing not supported.
=> Slicing not supported.
=>immutable in nature.

Ex:-
  s="Neeraj"
  fs=frozenset(s)
  print(fs)
  print(type(fs))

frozenset() methad:-
copy()
differanc()
intersection()
isdisjoin()

Data type:-
    mumeric
       integar int()
       float  float()
       complex complex()

string------ str()
list-------- list()
type-------- type()
dict-------- dict()
set--------- set()
frozenset--- frozenset()
boolean------ bool()
range------- range()

In-built-function:-
print()
input()
max()
min()
sum()
len()
type()
id()

-------------------------------------------- Control-statement --------------------------------------------
conditional statement:             looping/literative statement:-               transfear statement:-                      
if                                  for-looping                                    continew
if-else                             while-loop                                     break
if-elif                                                                            pass
if-elif-else


looping iterative statement:-
  while-loop   => infinite iterations/finite iterations
  for-loop     => finite iterations

while:-
 syntex:-
    i=0(initialization)
    while(condition):   true


Transfer-Statement:-
    break ------> Exit from loop-body.
    continue ------> Skip current iteration.
    pass -------> Skip current block.


function:-
  reusabllity,
  type of function
    In-built => print(), input(), type(), max(), sum(),............
    user-define function
       declaration of function
       calling of the function

1.Declaration:-
syntex:-
  dif fun-name(parameters):
  "doc string" 


Scope:-
 block of variable
   local variable
   global variable
 

------------------Advance pythone-------------------------
=>higher order function
    =>map()
    =>filter()
    =>reduce()
=>Lambdo function
=>Decorater
=>Generater
=>OOp's
=>Sql deatabase connectivity (CRUD)



map(fun-name iterater)
          => collection
              =>string
              =>list
              =>tuple
              =>set
              =>dict


Lambda
=> A function without name.
=> use Lambda keyword.
=> it takes n number og argament 
=> bat execute  only single line of expression
 
syntex:-
      lambda argumants :expression

Ex:-
add two no.
x=......
y=......
res=lambda p,q: p+q
print(res(x,y))

